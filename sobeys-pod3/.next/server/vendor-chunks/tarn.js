"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tarn";
exports.ids = ["vendor-chunks/tarn"];
exports.modules = {

/***/ "(rsc)/../node_modules/tarn/dist/PendingOperation.js":
/*!*****************************************************!*\
  !*** ../node_modules/tarn/dist/PendingOperation.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst TimeoutError_1 = __webpack_require__(/*! ./TimeoutError */ \"(rsc)/../node_modules/tarn/dist/TimeoutError.js\");\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../node_modules/tarn/dist/utils.js\");\r\nclass PendingOperation {\r\n    constructor(timeoutMillis) {\r\n        this.timeoutMillis = timeoutMillis;\r\n        this.deferred = utils_1.defer();\r\n        this.possibleTimeoutCause = null;\r\n        this.isRejected = false;\r\n        this.promise = timeout(this.deferred.promise, timeoutMillis).catch(err => {\r\n            if (err instanceof TimeoutError_1.TimeoutError) {\r\n                if (this.possibleTimeoutCause) {\r\n                    err = new TimeoutError_1.TimeoutError(this.possibleTimeoutCause.message);\r\n                }\r\n                else {\r\n                    err = new TimeoutError_1.TimeoutError('operation timed out for an unknown reason');\r\n                }\r\n            }\r\n            this.isRejected = true;\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n    abort() {\r\n        this.reject(new Error('aborted'));\r\n    }\r\n    reject(err) {\r\n        this.deferred.reject(err);\r\n    }\r\n    resolve(value) {\r\n        this.deferred.resolve(value);\r\n    }\r\n}\r\nexports.PendingOperation = PendingOperation;\r\nfunction timeout(promise, time) {\r\n    return new Promise((resolve, reject) => {\r\n        const timeoutHandle = setTimeout(() => reject(new TimeoutError_1.TimeoutError()), time);\r\n        promise\r\n            .then(result => {\r\n            clearTimeout(timeoutHandle);\r\n            resolve(result);\r\n        })\r\n            .catch(err => {\r\n            clearTimeout(timeoutHandle);\r\n            reject(err);\r\n        });\r\n    });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3Rhcm4vZGlzdC9QZW5kaW5nT3BlcmF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QixtQkFBTyxDQUFDLHVFQUFnQjtBQUMvQyxnQkFBZ0IsbUJBQU8sQ0FBQyx5REFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTCIsInNvdXJjZXMiOlsiL25vZGVfbW9kdWxlcy90YXJuL2Rpc3QvUGVuZGluZ09wZXJhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBUaW1lb3V0RXJyb3JfMSA9IHJlcXVpcmUoXCIuL1RpbWVvdXRFcnJvclwiKTtcclxuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xyXG5jbGFzcyBQZW5kaW5nT3BlcmF0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHRpbWVvdXRNaWxsaXMpIHtcclxuICAgICAgICB0aGlzLnRpbWVvdXRNaWxsaXMgPSB0aW1lb3V0TWlsbGlzO1xyXG4gICAgICAgIHRoaXMuZGVmZXJyZWQgPSB1dGlsc18xLmRlZmVyKCk7XHJcbiAgICAgICAgdGhpcy5wb3NzaWJsZVRpbWVvdXRDYXVzZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pc1JlamVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wcm9taXNlID0gdGltZW91dCh0aGlzLmRlZmVycmVkLnByb21pc2UsIHRpbWVvdXRNaWxsaXMpLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBUaW1lb3V0RXJyb3JfMS5UaW1lb3V0RXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBvc3NpYmxlVGltZW91dENhdXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyID0gbmV3IFRpbWVvdXRFcnJvcl8xLlRpbWVvdXRFcnJvcih0aGlzLnBvc3NpYmxlVGltZW91dENhdXNlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyID0gbmV3IFRpbWVvdXRFcnJvcl8xLlRpbWVvdXRFcnJvcignb3BlcmF0aW9uIHRpbWVkIG91dCBmb3IgYW4gdW5rbm93biByZWFzb24nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmlzUmVqZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFib3J0KCkge1xyXG4gICAgICAgIHRoaXMucmVqZWN0KG5ldyBFcnJvcignYWJvcnRlZCcpKTtcclxuICAgIH1cclxuICAgIHJlamVjdChlcnIpIHtcclxuICAgICAgICB0aGlzLmRlZmVycmVkLnJlamVjdChlcnIpO1xyXG4gICAgfVxyXG4gICAgcmVzb2x2ZSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuZGVmZXJyZWQucmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5QZW5kaW5nT3BlcmF0aW9uID0gUGVuZGluZ09wZXJhdGlvbjtcclxuZnVuY3Rpb24gdGltZW91dChwcm9taXNlLCB0aW1lKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KCgpID0+IHJlamVjdChuZXcgVGltZW91dEVycm9yXzEuVGltZW91dEVycm9yKCkpLCB0aW1lKTtcclxuICAgICAgICBwcm9taXNlXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlKTtcclxuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dEhhbmRsZSk7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/tarn/dist/PendingOperation.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/tarn/dist/Pool.js":
/*!*****************************************!*\
  !*** ../node_modules/tarn/dist/Pool.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst PendingOperation_1 = __webpack_require__(/*! ./PendingOperation */ \"(rsc)/../node_modules/tarn/dist/PendingOperation.js\");\r\nconst Resource_1 = __webpack_require__(/*! ./Resource */ \"(rsc)/../node_modules/tarn/dist/Resource.js\");\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../node_modules/tarn/dist/utils.js\");\r\nconst events_1 = __webpack_require__(/*! events */ \"events\");\r\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\r\nclass Pool {\r\n    constructor(opt) {\r\n        this.destroyed = false;\r\n        this.emitter = new events_1.EventEmitter();\r\n        opt = opt || {};\r\n        if (!opt.create) {\r\n            throw new Error('Tarn: opt.create function most be provided');\r\n        }\r\n        if (!opt.destroy) {\r\n            throw new Error('Tarn: opt.destroy function most be provided');\r\n        }\r\n        if (typeof opt.min !== 'number' || opt.min < 0 || opt.min !== Math.round(opt.min)) {\r\n            throw new Error('Tarn: opt.min must be an integer >= 0');\r\n        }\r\n        if (typeof opt.max !== 'number' || opt.max <= 0 || opt.max !== Math.round(opt.max)) {\r\n            throw new Error('Tarn: opt.max must be an integer > 0');\r\n        }\r\n        if (opt.min > opt.max) {\r\n            throw new Error('Tarn: opt.max is smaller than opt.min');\r\n        }\r\n        if (!utils_1.checkOptionalTime(opt.acquireTimeoutMillis)) {\r\n            throw new Error('Tarn: invalid opt.acquireTimeoutMillis ' + JSON.stringify(opt.acquireTimeoutMillis));\r\n        }\r\n        if (!utils_1.checkOptionalTime(opt.createTimeoutMillis)) {\r\n            throw new Error('Tarn: invalid opt.createTimeoutMillis ' + JSON.stringify(opt.createTimeoutMillis));\r\n        }\r\n        if (!utils_1.checkOptionalTime(opt.destroyTimeoutMillis)) {\r\n            throw new Error('Tarn: invalid opt.destroyTimeoutMillis ' + JSON.stringify(opt.destroyTimeoutMillis));\r\n        }\r\n        if (!utils_1.checkOptionalTime(opt.idleTimeoutMillis)) {\r\n            throw new Error('Tarn: invalid opt.idleTimeoutMillis ' + JSON.stringify(opt.idleTimeoutMillis));\r\n        }\r\n        if (!utils_1.checkOptionalTime(opt.reapIntervalMillis)) {\r\n            throw new Error('Tarn: invalid opt.reapIntervalMillis ' + JSON.stringify(opt.reapIntervalMillis));\r\n        }\r\n        if (!utils_1.checkOptionalTime(opt.createRetryIntervalMillis)) {\r\n            throw new Error('Tarn: invalid opt.createRetryIntervalMillis ' +\r\n                JSON.stringify(opt.createRetryIntervalMillis));\r\n        }\r\n        const allowedKeys = {\r\n            create: true,\r\n            validate: true,\r\n            destroy: true,\r\n            log: true,\r\n            min: true,\r\n            max: true,\r\n            acquireTimeoutMillis: true,\r\n            createTimeoutMillis: true,\r\n            destroyTimeoutMillis: true,\r\n            idleTimeoutMillis: true,\r\n            reapIntervalMillis: true,\r\n            createRetryIntervalMillis: true,\r\n            propagateCreateError: true\r\n        };\r\n        for (const key of Object.keys(opt)) {\r\n            if (!allowedKeys[key]) {\r\n                throw new Error(`Tarn: unsupported option opt.${key}`);\r\n            }\r\n        }\r\n        this.creator = opt.create;\r\n        this.destroyer = opt.destroy;\r\n        this.validate = typeof opt.validate === 'function' ? opt.validate : () => true;\r\n        this.log = opt.log || (() => { });\r\n        this.acquireTimeoutMillis = opt.acquireTimeoutMillis || 30000;\r\n        this.createTimeoutMillis = opt.createTimeoutMillis || 30000;\r\n        this.destroyTimeoutMillis = opt.destroyTimeoutMillis || 5000;\r\n        this.idleTimeoutMillis = opt.idleTimeoutMillis || 30000;\r\n        this.reapIntervalMillis = opt.reapIntervalMillis || 1000;\r\n        this.createRetryIntervalMillis = opt.createRetryIntervalMillis || 200;\r\n        this.propagateCreateError = !!opt.propagateCreateError;\r\n        this.min = opt.min;\r\n        this.max = opt.max;\r\n        // All the resources, which are either already acquired or which are\r\n        // considered for being passed to acquire in async validation phase.\r\n        this.used = [];\r\n        // All the resources, which are either just created and free or returned\r\n        // back to pool after using.\r\n        this.free = [];\r\n        this.pendingCreates = [];\r\n        this.pendingAcquires = [];\r\n        this.pendingDestroys = [];\r\n        // When acquire is pending, but also still in validation phase\r\n        this.pendingValidations = [];\r\n        this.destroyed = false;\r\n        this.interval = null;\r\n        this.eventId = 1;\r\n    }\r\n    numUsed() {\r\n        return this.used.length;\r\n    }\r\n    numFree() {\r\n        return this.free.length;\r\n    }\r\n    numPendingAcquires() {\r\n        return this.pendingAcquires.length;\r\n    }\r\n    numPendingValidations() {\r\n        return this.pendingValidations.length;\r\n    }\r\n    numPendingCreates() {\r\n        return this.pendingCreates.length;\r\n    }\r\n    acquire() {\r\n        const eventId = this.eventId++;\r\n        this._executeEventHandlers('acquireRequest', eventId);\r\n        const pendingAcquire = new PendingOperation_1.PendingOperation(this.acquireTimeoutMillis);\r\n        this.pendingAcquires.push(pendingAcquire);\r\n        // If the acquire fails for whatever reason\r\n        // remove it from the pending queue.\r\n        pendingAcquire.promise = pendingAcquire.promise\r\n            .then(resource => {\r\n            this._executeEventHandlers('acquireSuccess', eventId, resource);\r\n            return resource;\r\n        })\r\n            .catch(err => {\r\n            this._executeEventHandlers('acquireFail', eventId, err);\r\n            remove(this.pendingAcquires, pendingAcquire);\r\n            return Promise.reject(err);\r\n        });\r\n        this._tryAcquireOrCreate();\r\n        return pendingAcquire;\r\n    }\r\n    release(resource) {\r\n        this._executeEventHandlers('release', resource);\r\n        for (let i = 0, l = this.used.length; i < l; ++i) {\r\n            const used = this.used[i];\r\n            if (used.resource === resource) {\r\n                this.used.splice(i, 1);\r\n                this.free.push(used.resolve());\r\n                this._tryAcquireOrCreate();\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    isEmpty() {\r\n        return ([\r\n            this.numFree(),\r\n            this.numUsed(),\r\n            this.numPendingAcquires(),\r\n            this.numPendingValidations(),\r\n            this.numPendingCreates()\r\n        ].reduce((total, value) => total + value) === 0);\r\n    }\r\n    /**\r\n     * Reaping cycle.\r\n     */\r\n    check() {\r\n        const timestamp = utils_1.now();\r\n        const newFree = [];\r\n        const minKeep = this.min - this.used.length;\r\n        const maxDestroy = this.free.length - minKeep;\r\n        let numDestroyed = 0;\r\n        this.free.forEach(free => {\r\n            if (utils_1.duration(timestamp, free.timestamp) >= this.idleTimeoutMillis &&\r\n                numDestroyed < maxDestroy) {\r\n                numDestroyed++;\r\n                this._destroy(free.resource);\r\n            }\r\n            else {\r\n                newFree.push(free);\r\n            }\r\n        });\r\n        this.free = newFree;\r\n        // Pool is completely empty, stop reaping.\r\n        // Next .acquire will start reaping interval again.\r\n        if (this.isEmpty()) {\r\n            this._stopReaping();\r\n        }\r\n    }\r\n    destroy() {\r\n        const eventId = this.eventId++;\r\n        this._executeEventHandlers('poolDestroyRequest', eventId);\r\n        this._stopReaping();\r\n        this.destroyed = true;\r\n        // First wait for all the pending creates get ready.\r\n        return utils_1.reflect(Promise.all(this.pendingCreates.map(create => utils_1.reflect(create.promise)))\r\n            .then(() => {\r\n            // eslint-disable-next-line\r\n            return new Promise((resolve, reject) => {\r\n                // poll every 100ms and wait that all validations are ready\r\n                if (this.numPendingValidations() === 0) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n                const interval = setInterval(() => {\r\n                    if (this.numPendingValidations() === 0) {\r\n                        timers_1.clearInterval(interval);\r\n                        resolve();\r\n                    }\r\n                }, 100);\r\n            });\r\n        })\r\n            .then(() => {\r\n            // Wait for all the used resources to be freed.\r\n            return Promise.all(this.used.map(used => utils_1.reflect(used.promise)));\r\n        })\r\n            .then(() => {\r\n            // Abort all pending acquires.\r\n            return Promise.all(this.pendingAcquires.map(acquire => {\r\n                acquire.abort();\r\n                return utils_1.reflect(acquire.promise);\r\n            }));\r\n        })\r\n            .then(() => {\r\n            // Now we can destroy all the freed resources.\r\n            return Promise.all(this.free.map(free => utils_1.reflect(this._destroy(free.resource))));\r\n        })\r\n            .then(() => {\r\n            // Also wait rest of the pending destroys to finish\r\n            return Promise.all(this.pendingDestroys.map(pd => pd.promise));\r\n        })\r\n            .then(() => {\r\n            this.free = [];\r\n            this.pendingAcquires = [];\r\n        })).then(res => {\r\n            this._executeEventHandlers('poolDestroySuccess', eventId);\r\n            this.emitter.removeAllListeners();\r\n            return res;\r\n        });\r\n    }\r\n    on(event, listener) {\r\n        this.emitter.on(event, listener);\r\n    }\r\n    removeListener(event, listener) {\r\n        this.emitter.removeListener(event, listener);\r\n    }\r\n    removeAllListeners(event) {\r\n        this.emitter.removeAllListeners(event);\r\n    }\r\n    /**\r\n     * The most important method that is called always when resources\r\n     * are created / destroyed / acquired / released. In other words\r\n     * every time when resources are moved from used to free or vice\r\n     * versa.\r\n     *\r\n     * Either assigns free resources to pendingAcquires or creates new\r\n     * resources if there is room for it in the pool.\r\n     */\r\n    _tryAcquireOrCreate() {\r\n        if (this.destroyed) {\r\n            return;\r\n        }\r\n        if (this._hasFreeResources()) {\r\n            this._doAcquire();\r\n        }\r\n        else if (this._shouldCreateMoreResources()) {\r\n            this._doCreate();\r\n        }\r\n    }\r\n    _hasFreeResources() {\r\n        return this.free.length > 0;\r\n    }\r\n    _doAcquire() {\r\n        // Acquire as many pending acquires as possible concurrently\r\n        while (this._canAcquire()) {\r\n            // To allow async validation, we actually need to move free resource\r\n            // and pending acquire temporary from their respective arrays and depending\r\n            // on validation result to either leave the free resource to used resources array\r\n            // or destroy the free resource if validation did fail.\r\n            const pendingAcquire = this.pendingAcquires.shift();\r\n            const free = this.free.pop();\r\n            if (free === undefined || pendingAcquire === undefined) {\r\n                const errMessage = 'this.free was empty while trying to acquire resource';\r\n                this.log(`Tarn: ${errMessage}`, 'warn');\r\n                throw new Error(`Internal error, should never happen. ${errMessage}`);\r\n            }\r\n            // Make sure that pendingAcquire that is being validated is not lost and\r\n            // can be freed when pool is destroyed.\r\n            this.pendingValidations.push(pendingAcquire);\r\n            // Must be added here pre-emptively to prevent logic that decides\r\n            // if new resources are created will keep on working correctly.\r\n            this.used.push(free);\r\n            // if acquire fails also pending validation, must be aborted so that pre reserved\r\n            // resource will be returned to free resources immediately\r\n            const abortAbleValidation = new PendingOperation_1.PendingOperation(this.acquireTimeoutMillis);\r\n            // eslint-disable-next-line\r\n            pendingAcquire.promise.catch(err => {\r\n                abortAbleValidation.abort();\r\n            });\r\n            abortAbleValidation.promise\r\n                .catch(err => {\r\n                // There's nothing we can do here but log the error. This would otherwise\r\n                // leak out as an unhandled exception.\r\n                this.log('Tarn: resource validator threw an exception ' + err.stack, 'warn');\r\n                return false;\r\n            })\r\n                .then(validationSuccess => {\r\n                try {\r\n                    if (validationSuccess && !pendingAcquire.isRejected) {\r\n                        // At least one active resource exist, start reaping.\r\n                        this._startReaping();\r\n                        pendingAcquire.resolve(free.resource);\r\n                    }\r\n                    else {\r\n                        remove(this.used, free);\r\n                        // Only destroy the resource if the validation has failed\r\n                        if (!validationSuccess) {\r\n                            this._destroy(free.resource);\r\n                            // Since we destroyed an invalid resource and were not able to fulfill\r\n                            // all the pending acquires, we may need to create new ones or at\r\n                            // least run this acquire loop again to verify it. But not immediately\r\n                            // to prevent starving event loop.\r\n                            setTimeout(() => {\r\n                                this._tryAcquireOrCreate();\r\n                            }, 0);\r\n                        }\r\n                        else {\r\n                            this.free.push(free);\r\n                        }\r\n                        // is acquire was canceled, failed or timed out already\r\n                        // no need to return it to pending queries\r\n                        if (!pendingAcquire.isRejected) {\r\n                            this.pendingAcquires.unshift(pendingAcquire);\r\n                        }\r\n                    }\r\n                }\r\n                finally {\r\n                    remove(this.pendingValidations, pendingAcquire);\r\n                }\r\n            });\r\n            // try to validate\r\n            this._validateResource(free.resource)\r\n                .then(validationSuccess => {\r\n                abortAbleValidation.resolve(validationSuccess);\r\n            })\r\n                .catch(err => {\r\n                abortAbleValidation.reject(err);\r\n            });\r\n        }\r\n    }\r\n    _canAcquire() {\r\n        return this.free.length > 0 && this.pendingAcquires.length > 0;\r\n    }\r\n    _validateResource(resource) {\r\n        try {\r\n            return Promise.resolve(this.validate(resource));\r\n        }\r\n        catch (err) {\r\n            // prevent leaking of sync exception\r\n            return Promise.reject(err);\r\n        }\r\n    }\r\n    _shouldCreateMoreResources() {\r\n        return (this.used.length + this.pendingCreates.length < this.max &&\r\n            this.pendingCreates.length < this.pendingAcquires.length);\r\n    }\r\n    _doCreate() {\r\n        const pendingAcquiresBeforeCreate = this.pendingAcquires.slice();\r\n        const pendingCreate = this._create();\r\n        pendingCreate.promise\r\n            .then(() => {\r\n            // Not returned on purpose.\r\n            this._tryAcquireOrCreate();\r\n            return null;\r\n        })\r\n            .catch(err => {\r\n            if (this.propagateCreateError && this.pendingAcquires.length !== 0) {\r\n                // If propagateCreateError is true, we don't retry the create\r\n                // but reject the first pending acquire immediately. Intentionally\r\n                // use `this.pendingAcquires` instead of `pendingAcquiresBeforeCreate`\r\n                // in case some acquires in pendingAcquiresBeforeCreate have already\r\n                // been resolved.\r\n                this.pendingAcquires[0].reject(err);\r\n            }\r\n            // Save the create error to all pending acquires so that we can use it\r\n            // as the error to reject the acquire if it times out.\r\n            pendingAcquiresBeforeCreate.forEach(pendingAcquire => {\r\n                pendingAcquire.possibleTimeoutCause = err;\r\n            });\r\n            // Not returned on purpose.\r\n            utils_1.delay(this.createRetryIntervalMillis).then(() => this._tryAcquireOrCreate());\r\n        });\r\n    }\r\n    _create() {\r\n        const eventId = this.eventId++;\r\n        this._executeEventHandlers('createRequest', eventId);\r\n        const pendingCreate = new PendingOperation_1.PendingOperation(this.createTimeoutMillis);\r\n        // If an error occurs (likely a create timeout) remove this creation from\r\n        // the list of pending creations so we try to create a new one.\r\n        pendingCreate.promise = pendingCreate.promise.catch(err => {\r\n            if (remove(this.pendingCreates, pendingCreate)) {\r\n                // TODO: figure out more consistent way for different error handlers in next rewrite\r\n                this._executeEventHandlers('createFail', eventId, err);\r\n            }\r\n            throw err;\r\n        });\r\n        this.pendingCreates.push(pendingCreate);\r\n        callbackOrPromise(this.creator)\r\n            .then(resource => {\r\n            if (pendingCreate.isRejected) {\r\n                this.destroyer(resource);\r\n                return null;\r\n            }\r\n            remove(this.pendingCreates, pendingCreate);\r\n            this.free.push(new Resource_1.Resource(resource));\r\n            // Not returned on purpose.\r\n            pendingCreate.resolve(resource);\r\n            this._executeEventHandlers('createSuccess', eventId, resource);\r\n            return null;\r\n        })\r\n            .catch(err => {\r\n            if (pendingCreate.isRejected) {\r\n                return null;\r\n            }\r\n            if (remove(this.pendingCreates, pendingCreate)) {\r\n                this._executeEventHandlers('createFail', eventId, err);\r\n            }\r\n            // Not returned on purpose.\r\n            pendingCreate.reject(err);\r\n            return null;\r\n        });\r\n        return pendingCreate;\r\n    }\r\n    _destroy(resource) {\r\n        const eventId = this.eventId++;\r\n        this._executeEventHandlers('destroyRequest', eventId, resource);\r\n        // this.destroyer can be both synchronous and asynchronous.\r\n        // so we wrap it to promise to get all exceptions through same pipeline\r\n        const pendingDestroy = new PendingOperation_1.PendingOperation(this.destroyTimeoutMillis);\r\n        const retVal = Promise.resolve().then(() => this.destroyer(resource));\r\n        retVal\r\n            .then(() => {\r\n            pendingDestroy.resolve(resource);\r\n        })\r\n            .catch((err) => {\r\n            pendingDestroy.reject(err);\r\n        });\r\n        this.pendingDestroys.push(pendingDestroy);\r\n        // In case of an error there's nothing we can do here but log it.\r\n        return pendingDestroy.promise\r\n            .then(res => {\r\n            this._executeEventHandlers('destroySuccess', eventId, resource);\r\n            return res;\r\n        })\r\n            .catch(err => this._logDestroyerError(eventId, resource, err))\r\n            .then(res => {\r\n            const index = this.pendingDestroys.findIndex(pd => pd === pendingDestroy);\r\n            this.pendingDestroys.splice(index, 1);\r\n            return res;\r\n        });\r\n    }\r\n    _logDestroyerError(eventId, resource, err) {\r\n        this._executeEventHandlers('destroyFail', eventId, resource, err);\r\n        this.log('Tarn: resource destroyer threw an exception ' + err.stack, 'warn');\r\n    }\r\n    _startReaping() {\r\n        if (!this.interval) {\r\n            this._executeEventHandlers('startReaping');\r\n            this.interval = setInterval(() => this.check(), this.reapIntervalMillis);\r\n        }\r\n    }\r\n    _stopReaping() {\r\n        if (this.interval !== null) {\r\n            this._executeEventHandlers('stopReaping');\r\n            timers_1.clearInterval(this.interval);\r\n        }\r\n        this.interval = null;\r\n    }\r\n    _executeEventHandlers(eventName, ...args) {\r\n        const listeners = this.emitter.listeners(eventName);\r\n        // just calling .emit() would stop running rest of the listeners if one them fails\r\n        listeners.forEach(listener => {\r\n            try {\r\n                listener(...args);\r\n            }\r\n            catch (err) {\r\n                // There's nothing we can do here but log the error. This would otherwise\r\n                // leak out as an unhandled exception.\r\n                this.log(`Tarn: event handler \"${eventName}\" threw an exception ${err.stack}`, 'warn');\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.Pool = Pool;\r\nfunction remove(arr, item) {\r\n    const idx = arr.indexOf(item);\r\n    if (idx === -1) {\r\n        return false;\r\n    }\r\n    else {\r\n        arr.splice(idx, 1);\r\n        return true;\r\n    }\r\n}\r\nfunction callbackOrPromise(func) {\r\n    return new Promise((resolve, reject) => {\r\n        const callback = (err, resource) => {\r\n            if (err) {\r\n                reject(err);\r\n            }\r\n            else {\r\n                resolve(resource);\r\n            }\r\n        };\r\n        utils_1.tryPromise(() => func(callback))\r\n            .then(res => {\r\n            // If the result is falsy, we assume that the callback will\r\n            // be called instead of interpreting the falsy value as a\r\n            // result value.\r\n            if (res) {\r\n                resolve(res);\r\n            }\r\n        })\r\n            .catch(err => {\r\n            reject(err);\r\n        });\r\n    });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/tarn/dist/Pool.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/tarn/dist/PromiseInspection.js":
/*!******************************************************!*\
  !*** ../node_modules/tarn/dist/PromiseInspection.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nclass PromiseInspection {\r\n    constructor(args) {\r\n        this._value = args.value;\r\n        this._error = args.error;\r\n    }\r\n    value() {\r\n        return this._value;\r\n    }\r\n    reason() {\r\n        return this._error;\r\n    }\r\n    isRejected() {\r\n        return !!this._error;\r\n    }\r\n    isFulfilled() {\r\n        return !!this._value;\r\n    }\r\n}\r\nexports.PromiseInspection = PromiseInspection;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3Rhcm4vZGlzdC9Qcm9taXNlSW5zcGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIiLCJzb3VyY2VzIjpbIi9ub2RlX21vZHVsZXMvdGFybi9kaXN0L1Byb21pc2VJbnNwZWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNsYXNzIFByb21pc2VJbnNwZWN0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKGFyZ3MpIHtcclxuICAgICAgICB0aGlzLl92YWx1ZSA9IGFyZ3MudmFsdWU7XHJcbiAgICAgICAgdGhpcy5fZXJyb3IgPSBhcmdzLmVycm9yO1xyXG4gICAgfVxyXG4gICAgdmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG4gICAgcmVhc29uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lcnJvcjtcclxuICAgIH1cclxuICAgIGlzUmVqZWN0ZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZXJyb3I7XHJcbiAgICB9XHJcbiAgICBpc0Z1bGZpbGxlZCgpIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLl92YWx1ZTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlByb21pc2VJbnNwZWN0aW9uID0gUHJvbWlzZUluc3BlY3Rpb247XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/tarn/dist/PromiseInspection.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/tarn/dist/Resource.js":
/*!*********************************************!*\
  !*** ../node_modules/tarn/dist/Resource.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../node_modules/tarn/dist/utils.js\");\r\nclass Resource {\r\n    constructor(resource) {\r\n        this.resource = resource;\r\n        this.resource = resource;\r\n        this.timestamp = utils_1.now();\r\n        this.deferred = utils_1.defer();\r\n    }\r\n    get promise() {\r\n        return this.deferred.promise;\r\n    }\r\n    resolve() {\r\n        this.deferred.resolve(undefined);\r\n        return new Resource(this.resource);\r\n    }\r\n}\r\nexports.Resource = Resource;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3Rhcm4vZGlzdC9SZXNvdXJjZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyx5REFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IiLCJzb3VyY2VzIjpbIi9ub2RlX21vZHVsZXMvdGFybi9kaXN0L1Jlc291cmNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcclxuY2xhc3MgUmVzb3VyY2Uge1xyXG4gICAgY29uc3RydWN0b3IocmVzb3VyY2UpIHtcclxuICAgICAgICB0aGlzLnJlc291cmNlID0gcmVzb3VyY2U7XHJcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJlc291cmNlO1xyXG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gdXRpbHNfMS5ub3coKTtcclxuICAgICAgICB0aGlzLmRlZmVycmVkID0gdXRpbHNfMS5kZWZlcigpO1xyXG4gICAgfVxyXG4gICAgZ2V0IHByb21pc2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmZXJyZWQucHJvbWlzZTtcclxuICAgIH1cclxuICAgIHJlc29sdmUoKSB7XHJcbiAgICAgICAgdGhpcy5kZWZlcnJlZC5yZXNvbHZlKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZXNvdXJjZSh0aGlzLnJlc291cmNlKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlJlc291cmNlID0gUmVzb3VyY2U7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/tarn/dist/Resource.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/tarn/dist/TimeoutError.js":
/*!*************************************************!*\
  !*** ../node_modules/tarn/dist/TimeoutError.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nclass TimeoutError extends Error {\r\n}\r\nexports.TimeoutError = TimeoutError;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3Rhcm4vZGlzdC9UaW1lb3V0RXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsiL25vZGVfbW9kdWxlcy90YXJuL2Rpc3QvVGltZW91dEVycm9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcclxufVxyXG5leHBvcnRzLlRpbWVvdXRFcnJvciA9IFRpbWVvdXRFcnJvcjtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/tarn/dist/TimeoutError.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/tarn/dist/tarn.js":
/*!*****************************************!*\
  !*** ../node_modules/tarn/dist/tarn.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst Pool_1 = __webpack_require__(/*! ./Pool */ \"(rsc)/../node_modules/tarn/dist/Pool.js\");\r\nexports.Pool = Pool_1.Pool;\r\nconst TimeoutError_1 = __webpack_require__(/*! ./TimeoutError */ \"(rsc)/../node_modules/tarn/dist/TimeoutError.js\");\r\nexports.TimeoutError = TimeoutError_1.TimeoutError;\r\nmodule.exports = {\r\n    Pool: Pool_1.Pool,\r\n    TimeoutError: TimeoutError_1.TimeoutError\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3Rhcm4vZGlzdC90YXJuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWUsbUJBQU8sQ0FBQyx1REFBUTtBQUMvQixZQUFZO0FBQ1osdUJBQXVCLG1CQUFPLENBQUMsdUVBQWdCO0FBQy9DLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL25vZGVfbW9kdWxlcy90YXJuL2Rpc3QvdGFybi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBQb29sXzEgPSByZXF1aXJlKFwiLi9Qb29sXCIpO1xyXG5leHBvcnRzLlBvb2wgPSBQb29sXzEuUG9vbDtcclxuY29uc3QgVGltZW91dEVycm9yXzEgPSByZXF1aXJlKFwiLi9UaW1lb3V0RXJyb3JcIik7XHJcbmV4cG9ydHMuVGltZW91dEVycm9yID0gVGltZW91dEVycm9yXzEuVGltZW91dEVycm9yO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIFBvb2w6IFBvb2xfMS5Qb29sLFxyXG4gICAgVGltZW91dEVycm9yOiBUaW1lb3V0RXJyb3JfMS5UaW1lb3V0RXJyb3JcclxufTtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/tarn/dist/tarn.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/tarn/dist/utils.js":
/*!******************************************!*\
  !*** ../node_modules/tarn/dist/utils.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst PromiseInspection_1 = __webpack_require__(/*! ./PromiseInspection */ \"(rsc)/../node_modules/tarn/dist/PromiseInspection.js\");\r\nfunction defer() {\r\n    let resolve = null;\r\n    let reject = null;\r\n    const promise = new Promise((resolver, rejecter) => {\r\n        resolve = resolver;\r\n        reject = rejecter;\r\n    });\r\n    return {\r\n        promise,\r\n        resolve,\r\n        reject\r\n    };\r\n}\r\nexports.defer = defer;\r\nfunction now() {\r\n    return Date.now();\r\n}\r\nexports.now = now;\r\nfunction duration(t1, t2) {\r\n    return Math.abs(t2 - t1);\r\n}\r\nexports.duration = duration;\r\nfunction checkOptionalTime(time) {\r\n    if (typeof time === 'undefined') {\r\n        return true;\r\n    }\r\n    return checkRequiredTime(time);\r\n}\r\nexports.checkOptionalTime = checkOptionalTime;\r\nfunction checkRequiredTime(time) {\r\n    return typeof time === 'number' && time === Math.round(time) && time > 0;\r\n}\r\nexports.checkRequiredTime = checkRequiredTime;\r\nfunction delay(millis) {\r\n    return new Promise(resolve => setTimeout(resolve, millis));\r\n}\r\nexports.delay = delay;\r\nfunction reflect(promise) {\r\n    return promise\r\n        .then(value => {\r\n        return new PromiseInspection_1.PromiseInspection({ value });\r\n    })\r\n        .catch(error => {\r\n        return new PromiseInspection_1.PromiseInspection({ error });\r\n    });\r\n}\r\nexports.reflect = reflect;\r\nfunction tryPromise(cb) {\r\n    try {\r\n        const result = cb();\r\n        return Promise.resolve(result);\r\n    }\r\n    catch (err) {\r\n        return Promise.reject(err);\r\n    }\r\n}\r\nexports.tryPromise = tryPromise;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3Rhcm4vZGlzdC91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEIsbUJBQU8sQ0FBQyxpRkFBcUI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxPQUFPO0FBQ2xFLEtBQUs7QUFDTDtBQUNBLDJEQUEyRCxPQUFPO0FBQ2xFLEtBQUs7QUFDTDtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IiLCJzb3VyY2VzIjpbIi9ub2RlX21vZHVsZXMvdGFybi9kaXN0L3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IFByb21pc2VJbnNwZWN0aW9uXzEgPSByZXF1aXJlKFwiLi9Qcm9taXNlSW5zcGVjdGlvblwiKTtcclxuZnVuY3Rpb24gZGVmZXIoKSB7XHJcbiAgICBsZXQgcmVzb2x2ZSA9IG51bGw7XHJcbiAgICBsZXQgcmVqZWN0ID0gbnVsbDtcclxuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZXIsIHJlamVjdGVyKSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZSA9IHJlc29sdmVyO1xyXG4gICAgICAgIHJlamVjdCA9IHJlamVjdGVyO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHByb21pc2UsXHJcbiAgICAgICAgcmVzb2x2ZSxcclxuICAgICAgICByZWplY3RcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5kZWZlciA9IGRlZmVyO1xyXG5mdW5jdGlvbiBub3coKSB7XHJcbiAgICByZXR1cm4gRGF0ZS5ub3coKTtcclxufVxyXG5leHBvcnRzLm5vdyA9IG5vdztcclxuZnVuY3Rpb24gZHVyYXRpb24odDEsIHQyKSB7XHJcbiAgICByZXR1cm4gTWF0aC5hYnModDIgLSB0MSk7XHJcbn1cclxuZXhwb3J0cy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xyXG5mdW5jdGlvbiBjaGVja09wdGlvbmFsVGltZSh0aW1lKSB7XHJcbiAgICBpZiAodHlwZW9mIHRpbWUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2hlY2tSZXF1aXJlZFRpbWUodGltZSk7XHJcbn1cclxuZXhwb3J0cy5jaGVja09wdGlvbmFsVGltZSA9IGNoZWNrT3B0aW9uYWxUaW1lO1xyXG5mdW5jdGlvbiBjaGVja1JlcXVpcmVkVGltZSh0aW1lKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHRpbWUgPT09ICdudW1iZXInICYmIHRpbWUgPT09IE1hdGgucm91bmQodGltZSkgJiYgdGltZSA+IDA7XHJcbn1cclxuZXhwb3J0cy5jaGVja1JlcXVpcmVkVGltZSA9IGNoZWNrUmVxdWlyZWRUaW1lO1xyXG5mdW5jdGlvbiBkZWxheShtaWxsaXMpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbWlsbGlzKSk7XHJcbn1cclxuZXhwb3J0cy5kZWxheSA9IGRlbGF5O1xyXG5mdW5jdGlvbiByZWZsZWN0KHByb21pc2UpIHtcclxuICAgIHJldHVybiBwcm9taXNlXHJcbiAgICAgICAgLnRoZW4odmFsdWUgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUluc3BlY3Rpb25fMS5Qcm9taXNlSW5zcGVjdGlvbih7IHZhbHVlIH0pO1xyXG4gICAgfSlcclxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUluc3BlY3Rpb25fMS5Qcm9taXNlSW5zcGVjdGlvbih7IGVycm9yIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5yZWZsZWN0ID0gcmVmbGVjdDtcclxuZnVuY3Rpb24gdHJ5UHJvbWlzZShjYikge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBjYigpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnRyeVByb21pc2UgPSB0cnlQcm9taXNlO1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/tarn/dist/utils.js\n");

/***/ })

};
;